import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.utils.IOUtils;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class ZipMultipleFolders {
    public static void main(String[] args) {
        List<String> sourceFolders = new ArrayList<>();
        sourceFolders.add("/path/to/source/folder1"); // 替换为实际的第一个源文件夹路径
        sourceFolders.add("/path/to/source/folder2"); // 替换为实际的第二个源文件夹路径
        String zipFilePath = "/path/to/output/zip/file.zip"; // 替换为实际的输出zip文件路径

        try {
            FileOutputStream fos = new FileOutputStream(zipFilePath);
            ZipArchiveOutputStream zos = new ZipArchiveOutputStream(fos);
            for (String sourceFolderPath : sourceFolders) {
                File sourceFolder = new File(sourceFolderPath);
                zipFolder(sourceFolder, zos);
            }
            zos.finish();
            zos.close();
            fos.close();
            System.out.println("多个文件夹已成功打包成zip文件！");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void zipFolder(File sourceFolder, ZipArchiveOutputStream zos) throws IOException {
        ZipArchiveEntry zipEntry = new ZipArchiveEntry(sourceFolder.getName() + "/");
        zos.putArchiveEntry(zipEntry);
        zos.closeArchiveEntry();

        for (File file : sourceFolder.listFiles()) {
            if (file.isDirectory()) {
                zipFolder(file, zos);
            } else {
                zipEntry = new ZipArchiveEntry(sourceFolder.getName() + "/" + file.getName());
                zos.putArchiveEntry(zipEntry);
                FileInputStream fis = new FileInputStream(file);
                IOUtils.copy(fis, zos);
                fis.close();
                zos.closeArchiveEntry();
            }
        }
    }
}
