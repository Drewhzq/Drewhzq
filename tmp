private Workbook getSteelBpaItemMaterialExport(List<SteelBpaItemMaterialDetailVO> steelBpaItemMaterialDetailList)
            throws ApplicationException {
        ExcelVO excelData = new ExcelVO();
        excelData.setExportData(steelBpaItemMaterialDetailList);
        excelData.setSheetName("Attachment Information");
        setExportHeader(excelData);
        excelData.setNeedRender(true);
        // 单元格样式渲染行数，默认渲染2000行
        excelData.setRenderRows(2000);
        // 冻结行数，默认1行
        excelData.setFreezeRows(1);
        // 冻结列数，默认0列
        excelData.setFreezeCols(0);
        Workbook workbook = ExportExcelUtil.createGeneralExcel(excelData);
        return workbook;
    }

    public static Workbook createGeneralExcel(ExcelVO exportVO) throws ApplicationException {
        Workbook wb = new XSSFWorkbook(); // 创建Excel表
        List<String> remarkList = exportVO.getExportRemark(); // 操作说明
        // 单元格样式渲染行数
        int randerRows = exportVO.getRenderRows();
        // 导出模板的sheet名称
        String sheetName = exportVO.getSheetName();
        // 创建模板工作表
        Sheet tempSheet = wb.createSheet(sheetName);
        // 设置密码保护，超出保护的行，列将不可以编辑，同时不能直接复制行进行粘贴，只能选择保护范围内的区域复制粘贴
        // 默认不保护
        if (exportVO.isProtect()) {
            tempSheet.protectSheet(HW_SRM_WEBD);
        }
        // 冻结前一行三列
        tempSheet.createFreezePane(exportVO.getFreezeCols(), exportVO.getFreezeRows());
        // 设置默认列的宽度
        tempSheet.setDefaultColumnWidth(20);
        // 设置所有列高度
        tempSheet.setDefaultRowHeight((short) 500);

        // 创建操作说明sheet
        if (remarkList != null && !remarkList.isEmpty()) {
            Sheet remarkSheet = wb.createSheet("Remark"); // 创建模板工作表
            for (int i = 0; i < remarkList.size(); i++) {
                Row remarkRow = remarkSheet.createRow(i);
                remarkRow.createCell(0).setCellValue(remarkList.get(i));
            }
        }
        LinkedHashMap<String, ExcelHeaderVO> headerMap = exportVO.getExportHeader(); // 列头
        List<?> dataList = exportVO.getExportData(); // 数据内容
        // 是否需要渲染出空白行
        boolean needRender = exportVO.isNeedRender();
        // 导出的数据方式，VO，MAP等
        String dataType = exportVO.getDataType();
        if (headerMap != null && !headerMap.isEmpty()) {
            ExcelCellStyleVO styleBean = writeTempCell(tempSheet, headerMap, wb, randerRows);
            renderRowData(tempSheet, dataList, dataType, headerMap, styleBean, needRender, randerRows);
        }
        return wb;
    }
